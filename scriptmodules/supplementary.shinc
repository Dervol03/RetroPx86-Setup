#!/bin/bash

#  RetroPie-Setup - Shell script for initializing Raspberry Pi 
#  with RetroArch, various cores, and EmulationStation (a graphical 
#  front end).
# 
#  (c) Copyright 2012-2013  Florian MÃ¼ller (contact@petrockblock.com)
# 
#  RetroPie-Setup homepage: https://github.com/petrockblog/RetroPie-Setup
# 
#  Permission to use, copy, modify and distribute RetroPie-Setup in both binary and
#  source form, for non-commercial purposes, is hereby granted without fee,
#  providing that this license information and copyright notice appear with
#  all copies and any derived work.
# 
#  This software is provided 'as-is', without any express or implied
#  warranty. In no event shall the authors be held liable for any damages
#  arising from the use of this software.
# 
#  RetroPie-Setup is freeware for PERSONAL USE only. Commercial users should
#  seek permission of the copyright holders first. Commercial use includes
#  charging money for RetroPie-Setup or software derived from RetroPie-Setup.
# 
#  The copyright holders request that bug fixes and improvements to the code
#  should be forwarded to them so everyone can benefit from the modifications
#  in future versions.
# 
#  Many, many thanks go to all people that provide the individual packages!!!
# 
#  Raspberry Pi is a trademark of the Raspberry Pi Foundation.
# 

# configure AdvanceMenu
function sup_configure_advancemenu()
{
    printMsg "Configuring AdvanceMenu"

    mkdir -p "/home/$user/.advance/"
    cp "$scriptdir/supplementary/advmenu.rc" "/home/$user/.advance/"

    cat >> "/home/$user/.advance/advmenu.rc" << _EOF_

emulator "Atari 2600" generic "/usr/local/bin/retroarch" "-L `find $rootdir/emulatorcores/stella-libretro/ -name "*libretro*.so"` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/atari2600/retroarch.cfg %p"
emulator_roms "Atari 2600" "$rootdir/roms/atari2600"

emulator "Doom" generic "/usr/local/bin/retroarch" "-L `find $rootdir/emulatorcores/libretro-prboom/ -name "*libretro*.so"` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/doom/retroarch.cfg %p"
emulator_roms "Doom" "$rootdir/roms/doom"

emulator "eDuke32" generic "/usr/local/bin/eduke32" "%p"

emulator "Gameboy Advance" generic "$rootdir/emulators/gpsp/gpsp" "%p"
emulator_roms "Gameboy Advance" "$rootdir/roms/gba"

emulator "Gameboy Color" generic "-L `find $rootdir/emulatorcores/gambatte-libretro/ -name "*libretro*.so"` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/gbc/retroarch.cfg %p"
emulator_roms "Gameboy Color" "$rootdir/roms/gbc"

emulator "Sega Game Gear" generic "$rootdir/emulators/osmose-0.8.1+rpi20121122/osmose" "%p -joy -tv -fs"
emulator_roms "Sega Game Gear" "$rootdir/roms/gamegear"

emulator "IntelliVision" generic "$rootdir/emulators/jzintv-1.0-beta4/bin/jzintv" "-z1 -f1 -q %p"
emulator_roms "IntelliVision" "$rootdir/roms/intellivision"

emulator "MAME" generic "/usr/local/bin/retroarch" "-L `find $rootdir/emulatorcores/imame4all-libretro/ -name "*libretro*.so"` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/mame/retroarch.cfg %p"
emulator_roms "MAME" "$rootdir/roms/mame"

emulator "ScummVM" generic "scummvm"
emulator_roms "ScummVM" "$rootdir/roms/scummvm"

emulator "Sega Master System" generic "$rootdir/emulators/osmose-0.8.1+rpi20121122/osmose" "%p -joy -tv -fs"
emulator_roms "Sega Master System" "$rootdir/roms/mastersystem"

emulator "Sega Mega Drive / Genesis" generic "$rootdir/emulators/dgen-sdl/dgen" "-f %p"
emulator_roms "Sega Mega Drive / Genesis" "$rootdir/roms/megadrive"

emulator "NeoGeo" generic "$rootdir/emulators/gngeo-0.7/src/gngeo" "-i $rootdir/roms/neogeo -B $rootdir/emulators/gngeo-0.7/neogeo-bios %p" 
emulator_roms "NeoGeo" "$rootdir/roms/neogeo"

emulator "Nintendo Entertainment System" generic "/usr/local/bin/retroarch" "-L `find $rootdir/emulatorcores/fceu-next/ -name "*libretro*.so"` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/nes/retroarch.cfg %p"
emulator_roms "Nintendo Entertainment System" "$rootdir/roms/nes"

emulator "PC Engine/TurboGrafx 16" generic "/usr/local/bin/retroarch" "-L `find $rootdir/emulatorcores/mednafen-pce-libretro/ -name "*libretro*.so"` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/pcengine/retroarch.cfg %p"
emulator_roms "PC Engine/TurboGrafx 16" "$rootdir/roms/pcengine"

emulator "Sony Playstation 1" generic "/usr/local/bin/retroarch" "-L `find $rootdir/emulatorcores/pcsx_libretro/ -name "*libretro*.so"` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/psx/retroarch.cfg %p"
emulator_roms "Sony Playstation 1" "$rootdir/roms/psx"

emulator "Super Nintendo" generic "/usr/local/bin/retroarch" "-L `find $rootdir/emulatorcores/pocketsnes-libretro/ -name "*libretro*.so"` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/snes/retroarch.cfg %p"
emulator_roms "Super Nintendo" "$rootdir/roms/snes"

_EOF_

}

# install AdvanceMenu
function sup_install_advancemenu()
{
    printMsg "Installing Advance Menu"

    dialog --title "AdvanceMenu" --clear \
    --yesno "It is important that you have set GPU memory to 16 MB (e.g., via the raspi-config script). Do you want to continue?" 22 76

    case $? in
      0)

        wget http://downloads.sourceforge.net/project/advancemame/advancemenu/2.5.0/advancemenu-2.5.0.tar.gz
        tar xvfz advancemenu-2.5.0.tar.gz -C "$rootdir/supplementary/"

        apt-get install -y gcc-4.7
        export CC=gcc-4.7   
        export GCC=g++-4.7    

        pushd "$rootdir/supplementary/advancemenu-2.5.0/"
        ./configure
        sed -i -e "s| -march=native||g" Makefile
        make
        make install
        popd

        sup_configure_advancemenu
        rm advancemenu-2.5.0.tar.gz
        unset CC
        unset GCC

        dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Remember to increase the GPU memory again (e.g., via the raspi-config script)!" 22 76    

     ;;
      *)
        ;;
    esac

}

# install Dispmanx library
function sup_install_dispmanx()
{
    printMsg "Installing Dispmanx library"    
    if [[ -d "$rootdir/supplementary/dispmanx" ]]; then
        rm -rf "$rootdir/supplementary/dispmanx"
    fi 
    gitPullOrClone "$rootdir/supplementary/dispmanx" git://github.com/vanfanel/SDL12-kms-dispmanx.git
    export CFLAGS +=" -I/opt/vc/include/interface/vmcs_host/linux"
    ./MAC_ConfigureDISPMANX.sh
    make

    if [[ ! -f "$rootdir/supplementary/dispmanx/build/.libs/libSDL.so" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Dispmanx."
    fi    
    popd
    export CFLAGS="${__default_cflags}"
}

# install BCM library to enable GPIO access by SNESDev-RPi
function sup_install_bcmlibrary()
{
    printMsg "Installing BCM2835 library"
    wget http://www.open.com.au/mikem/bcm2835/bcm2835-1.36.tar.gz
    tar -zxvf bcm2835-1.36.tar.gz
    mkdir -p "$rootdir/supplementary/"
    if [[ -d "$rootdir/supplementary/bcm2835-1.36/" ]]; then
        rm -rf "$rootdir/supplementary/bcm2835-1.36/"
    fi
    mv bcm2835-1.36 $rootdir/supplementary/
    pushd $rootdir/supplementary/bcm2835-1.36
    ./configure
    make clean
    make
    make install
    popd
    rm bcm2835-1.36.tar.gz 
}

function sup_configure_snesdev()
{
    cp "$rootdir/supplementary/SNESDev-Rpi/supplementary/snesdev.cfg" /etc/
}

# install SNESDev as GPIO interface for SNES controllers
function sup_install_snesdev()
{
    printMsg "Installing SNESDev as GPIO interface for SNES controllers"
    gitPullOrClone "$rootdir/supplementary/SNESDev-Rpi" git://github.com/petrockblog/SNESDev-RPi.git
    ./build.sh
    sup_configure_snesdev
    if [[ ! -f "$rootdir/supplementary/SNESDev-Rpi/SNESDev" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile SNESDev."  
    else
        service SNESDev stop
        cp "$rootdir/supplementary/SNESDev-Rpi/SNESDev" /usr/local/bin/
    fi    
    popd
}

# start SNESDev on boot and configure RetroArch input settings
function sup_enableSNESDevAtStart()
{
    clear
    printMsg "Enabling SNESDev on boot."

    if [[ ! -f "/etc/init.d/SNESDev" ]]; then
        if [[ ! -f "$rootdir/supplementary/SNESDev-Rpi/SNESDev" ]]; then
            dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Cannot find SNESDev binary. Please install SNESDev." 22 76    
            return
        else
            echo "Copying service script for SNESDev to /etc/init.d/ ..."
            chmod +x "$rootdir/supplementary/SNESDev-Rpi/scripts/SNESDev"
            cp "$rootdir/supplementary/SNESDev-Rpi/scripts/SNESDev" /etc/init.d/
        fi
    fi

    echo "Copying SNESDev to /usr/local/bin/ ..."
    cp "$rootdir/supplementary/SNESDev-Rpi/SNESDev" /usr/local/bin/

    case $1 in
      1)
        ensureKeyValueBootconfig "button_enabled" "0" "/etc/snesdev.cfg"
        ensureKeyValueBootconfig "gamepad1_enabled" "1" "/etc/snesdev.cfg"
        ensureKeyValueBootconfig "gamepad2_enabled" "1" "/etc/snesdev.cfg"
        ;;
      2)
        ensureKeyValueBootconfig "button_enabled" "1" "/etc/snesdev.cfg"
        ensureKeyValueBootconfig "gamepad1_enabled" "0" "/etc/snesdev.cfg"
        ensureKeyValueBootconfig "gamepad2_enabled" "0" "/etc/snesdev.cfg"
        ;;
      3)
        ensureKeyValueBootconfig "button_enabled" "1" "/etc/snesdev.cfg"
        ensureKeyValueBootconfig "gamepad1_enabled" "1" "/etc/snesdev.cfg"
        ensureKeyValueBootconfig "gamepad2_enabled" "1" "/etc/snesdev.cfg"
        ;;
      *)
        echo "[sup_enableSNESDevAtStart] I do not understand what is going on here."
        ;;
    esac

    # This command installs the init.d script so it automatically starts on boot
    update-rc.d SNESDev defaults
    # This command starts the daemon now so no need for a reboot
    service SNESDev start
}

# disable start SNESDev on boot and remove RetroArch input settings
function sup_disableSNESDevAtStart()
{
    clear
    printMsg "Disabling SNESDev on boot."

    # This command stops the daemon now so no need for a reboot
    service SNESDev stop

    # This command installs the init.d script so it automatically starts on boot
    update-rc.d SNESDev remove
}

# Show dialogue for enabling/disabling SNESDev on boot
function sup_enableDisableSNESDevStart()
{
    cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --menu "Choose the desired boot behaviour." 22 86 16)
    options=(1 "Disable SNESDev on boot and SNESDev keyboard mapping."
             2 "Enable SNESDev on boot and SNESDev keyboard mapping (polling pads and button)."
             3 "Enable SNESDev on boot and SNESDev keyboard mapping (polling only pads)."
             4 "Enable SNESDev on boot and SNESDev keyboard mapping (polling only button).")
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
    if [ "$choices" != "" ]; then
        case $choices in
            1) sup_disableSNESDevAtStart
               dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Disabled SNESDev on boot." 22 76    
                            ;;
            2) sup_enableSNESDevAtStart 3
               dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Enabled SNESDev on boot (polling pads and button)." 22 76    
                            ;;
            3) sup_enableSNESDevAtStart 1
               dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Enabled SNESDev on boot (polling only pads)." 22 76    
                            ;;
            4) sup_enableSNESDevAtStart 2
               dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Enabled SNESDev on boot (polling only button)." 22 76    
                            ;;
        esac
    else
        break
    fi    
}

# a work around here, so that EmulationStation can be executed from arbitrary locations
function sup_install_esscript()
{
    cat > /usr/bin/emulationstation << _EOF_
#!/bin/bash

es_bin="$rootdir/supplementary/EmulationStation/emulationstation"

nb_lock_files=\$(find /tmp -name ".X?-lock" | wc -l)
if [ \$nb_lock_files -ne 0 ]; then
    echo "X is running. Please shut down X in order to mitigate problems with loosing keyboard input. For example, logout from LXDE."
    exit 1
fi

\$es_bin "\$@"
_EOF_
    chmod +x /usr/bin/emulationstation
}

function sup_configure_esconfig()
{
    printMsg "Configuring ES-config"
    cp "$scriptdir/supplementary/settings.xml" "$rootdir/supplementary/ES-config/"
    sed -i -e "s|/home/pi/RetroPie|$rootdir|g" "$rootdir/supplementary/ES-config/settings.xml"
    if [[ ! -d $rootdir/roms/esconfig ]]; then
        mkdir -p $rootdir/roms/esconfig
    fi
    # generate new startup scripts for ES-config
    cp "$scriptdir/supplementary/scripts/input/esconfig.py" "$rootdir/roms/esconfig/"
    # chown $user $rootdir/roms/esconfig/esconfig.py
    # chgrp $user $rootdir/roms/esconfig/esconfig.py
    chmod +x $rootdir/roms/esconfig/esconfig.py
    cp "$scriptdir/supplementary/scripts/input/basic.py" "$rootdir/roms/esconfig/"
    # chown $user $rootdir/roms/esconfig/basic.py
    # chgrp $user $rootdir/roms/esconfig/basic.py
    chmod +x $rootdir/roms/esconfig/basic.py    
    cp "$scriptdir/supplementary/scripts/input/autooff.py" "$rootdir/roms/esconfig/"
    # chown $user $rootdir/roms/esconfig/autooff.py
    # chgrp $user $rootdir/roms/esconfig/autooff.py
    chmod +x $rootdir/roms/esconfig/autooff.py    
    cp "$scriptdir/supplementary/scripts/input/autoon.py" "$rootdir/roms/esconfig/"
    # chown $user $rootdir/roms/esconfig/autoon.py
    # chgrp $user $rootdir/roms/esconfig/autoon.py
    chmod +x $rootdir/roms/esconfig/autoon.py    
    cp "$scriptdir/supplementary/scripts/info/showip.py" "$rootdir/roms/esconfig/"
    # chown $user $rootdir/roms/esconfig/showip.py
    # chgrp $user $rootdir/roms/esconfig/showip.py
    chmod +x $rootdir/roms/esconfig/showip.py    
    cp "$scriptdir/supplementary/scripts/input/rgui.py" "$rootdir/roms/esconfig/"
    # chown $user $rootdir/roms/esconfig/rgui.py
    # chgrp $user $rootdir/roms/esconfig/rgui.py
    chmod +x $rootdir/roms/esconfig/rgui.py    
    cp "$scriptdir/supplementary/scripts/audio/*.py" "$rootdir/roms/exconfig/"
    # chown $user $rootdir/roms/esconfig/*.py
    # chgrp $user $rootdir/roms/esconfig/*.py
    chmod +x $rootdir/roms/esconfig/*.py
    # add some information
    cat > $rootdir/roms/esconfig/gamelist.xml << _EOF_
<?xml version="1.0"?>
<gameList>
	<game>
		<path>$rootdir/roms/esconfig/esconfig.py</path>
		<name>Start ES-Config</name>
		<desc>[DGen]
Old Genesis/Megadrive emulator

[RetroArch]
GB,GBC,NES,SNES,MASTERSYSTEM,GENESIS/MEGADRIVE,PSX

[GnGeo]
Old NeoGeo emulator
GNGEO 0.7</desc>
	</game>
	<game>
		<path>$rootdir/roms/esconfig/basic.py</path>
		<name>Start basic input configuration</name>
		<desc>Update Retroarch Autoconfig and Emulationstation</desc>
	</game>
	<game>
		<path>$rootdir/roms/esconfig/autoon.py</path>
		<name>Enable RetroArch Autoconfig</name>
	</game>
	<game>
		<path>$rootdir/roms/esconfig/autooff.py</path>
		<name>Disable RetroArch Autoconfig</name>
	</game>
	<game>
		<path>$rootdir/roms/esconfig/rgui.py</path>
		<name>Open RGUI</name>
		<desc>RetroArch Menu. (X = ok, Y/Z = cancel)</desc>
	</game>
	<game>
		<path>$rootdir/roms/esconfig/showip.py</path>
		<name>Show current IP address</name>
	</game>
</gameList>
_EOF_
# chown $user $rootdir/roms/esconfig/gamelist.xml
# chgrp $user $rootdir/roms/esconfig/gamelist.xml
}

function sup_install_esconfig()
{
    printMsg "Installing ES-config"
    if [[ -d "$rootdir/supplementary/ES-config" ]]; then
        rm -rf "$rootdir/supplementary/ES-config"
    fi 
    gitPullOrClone "$rootdir/supplementary/ES-config" git://github.com/Aloshi/ES-config.git
    sed -i -e "s/apt-get install/apt-get install -y/g" get_dependencies.sh
    ./get_dependencies.sh
    make
    popd
    sup_configure_esconfig

    if [[ ! -f "$rootdir/supplementary/ES-config/es-config" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile ES-config."
    fi
}

# install EmulationStation as graphical front end for the emulators
function sup_install_emulationstation()
{
    printMsg "Installing EmulationStation as graphical front end"

    # make sure that SDL 2 is installed
    # (in the future this should hopefully be an apt package; 
    #   2.0.0 is in the repo right now, but we need at least 2.0.1 for RPi support)
    # WARNING: 2.0.3 seems to break on the Pi (or at least for EmulationStation) -
    #   There is an error when initializing the SDL window, something about initializing the EGL library.
    if [[ ! -f "/usr/local/lib/libSDL2.so" ]]; then

        # These packages are listed in SDL2's "README-raspberrypi.txt" file as build dependencies.
        # If libudev-dev is not installed before compiling, the keyboard will mysteriously not work!
        # The rest should already be installed, but just to be safe, include them all.
        apt-get install -y libudev-dev libasound2-dev libdbus-1-dev libraspberrypi0 libraspberrypi-bin libraspberrypi-dev

        wget http://libsdl.org/release/SDL2-2.0.1.tar.gz
        tar xvfz SDL2-2.0.1.tar.gz -C "$rootdir/supplementary/"
        pushd "$rootdir/supplementary/SDL2-2.0.1"
        ./configure
        make
        make install
        popd
        rm SDL2-2.0.1.tar.gz
    fi

    gitPullOrClone "$rootdir/supplementary/EmulationStation" git://github.com/Aloshi/EmulationStation.git

    # check out unstable branch
    git pull
    git checkout unstable

    #ES requires C++11 support to build, which means g++ 4.7 or later, which isn't what g++ resolves to right now
    rm -rf CMakeFiles
    rm CMakeCache.txt
    export CXX=g++-4.7 
    cmake .
    make
    unset CXX
    sup_install_esscript    
    if [[ ! -f "$rootdir/supplementary/EmulationStation/emulationstation" ]]; then
        __ERRMSGS="$__ERRMSGS Could not successfully compile Emulation Station."
    fi

    if [[ ! -f /usr/lib/libEGL.so ]]; then
        ln -fs /opt/vc/lib/libEGL.so /usr/lib/libEGL.so
    fi
    popd
}

# generate EmulationStation configuration
function sup_generate_esconfig()
{
    printMsg "Generating configuration file /etc/emulationstation/es_systems.cfg for EmulationStation"

    # TODO can be deleted after reorganization
    # if [[ ! -d "$rootdir/../.emulationstation" ]]; then
    #     mkdir "$rootdir/../.emulationstation"
    # fi

    if [[ $__netplayenable == "E" ]]; then
         local __tmpnetplaymode="-$__netplaymode "
         local __tmpnetplayhostip_cfile=$__netplayhostip_cfile
         local __tmpnetplayport="--port $__netplayport "
         local __tmpnetplayframes="--frames $__netplayframes"
     else
         local __tmpnetplaymode=""
         local __tmpnetplayhostip_cfile=""
         local __tmpnetplayport=""
         local __tmpnetplayframes=""
     fi

    mkdir /etc/emulationstation

    cat > "/etc/emulationstation/es_systems.cfg" << _EOF_
<systemList>  

    <system>
        <fullname>Apple ][</fullname>
        <name>apple2</name>
        <path>$rootdir/roms/apple2</path>
        <extension>.txt</extension>
        <command>$rootdir/emulators/linapple-src_2a/Start.sh</command>
        <platform>apple2</platform>
    </system>

    <system>
        <fullname>Atari 800</fullname>
        <name>atari800</name>
        <path>$rootdir/roms/atari800</path>
        <extension>.xex .XEX</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/atari800-3.0.0/installdir/bin/atari800 %ROM%"</command>
        <platform>atari800</platform>
    </system>

    <system>
        <fullname>Atari 2600</fullname>
        <name>atari2600</name>
        <path>$rootdir/roms/atari2600</path>
        <extension>.a26 .A26 .bin .BIN .rom .ROM .zip .ZIP .gz .GZ</extension>
        <!-- alternatively: <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "stella %ROM%"</command> -->
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/stella-libretro/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/atari2600/retroarch.cfg $__tmpnetplaymode$__tmpnetplayhostip_cfile$__tmpnetplayport$__tmpnetplayframes %ROM%"</command>
        <platform>atari2600</platform>
    </system>

    <system>
        <fullname>Atari ST/STE/Falcon</fullname>
        <name>atariStSteFalcon</name>
        <path>$rootdir/roms/atariStSteFalcon</path>
        <extension>.st .ST .img .IMG .rom .ROM</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "hatari %ROM%"</command>
        <platform>atarist</platform>
    </system>

    <system>
        <fullname>Apple Macintosh</fullname>
        <name>mac</name>
        <path>$rootdir/roms/basiliskii</path>
        <extension>.txt</extension>
        <!-- alternatively: <command>sudo modprobe snd_pcm_oss && xinit $rootdir/emulators/basiliskii/installdir/bin/BasiliskII</command> -->
        <!-- ~/.basilisk_ii_prefs: Setup all and everything under X, enable fullscreen and disable GUI -->
        <command>xinit $rootdir/emulators/basiliskii/installdir/bin/BasiliskII</command>
    </system>

    <system>
        <fullname>C64</fullname>
        <name>c64</name>
        <path>$rootdir/roms/c64</path>
        <extension>.crt .CRT .d64 .D64 .g64 .G64 .t64 .T64 .tap .TAP .x64 .X64 .zip .ZIP</extension>
        <!-- alternatively: <command>$rootdir/emulators/vice-2.3.dfsg/installdir/bin/x64 %ROM%</command> -->
        <command>$rootdir/supplementary/runcommand/runcommand.sh 4 "$rootdir/emulators/vice-2.4/installdir/bin/x64 -sdlbitdepth 16 %ROM%"</command>
        <platform>c64</platform>
    </system>

    <system>
        <fullname>Capcom</fullname>
        <name>capcom</name>
        <path>$rootdir/roms/capcom</path>
        <extension>.zip .ZIP .fba .FBA</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/pifba/fba2x %ROM%" </command>
        <!-- alternatively: <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/fba-libretro/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/fba/retroarch.cfg $__tmpnetplaymode$__tmpnetplayhostip_cfile$__tmpnetplayport$__tmpnetplayframes %ROM%"</command> -->
        <platform>arcade</platform>
    </system>

    <system>
        <fullname>Amstrad CPC</fullname>
        <name>cpc</name>
        <path>$rootdir/roms/cpc</path>
        <extension>.cpc .CPC .dsk .DSK</extension>
        <command>$rootdir/emulators/cpc4rpi-1.1/cpc4rpi %ROM%</command>
    </system>

    <system>
        <fullname>Game Boy</fullname>
        <name>gb</name>
        <path>$rootdir/roms/gb</path>
        <extension>.gb .GB</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/gambatte-libretro/libgambatte/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/gb/retroarch.cfg %ROM%"</command>
        <platform>gb</platform>
    </system>

    <system>
        <fullname>Game Boy Advance</fullname>
        <name>gba</name>
        <path>$rootdir/roms/gba</path>
        <extension>.gba .GBA</extension>
        <command>/home/pi/RetroPie/supplementary/runcommand/runcommand.sh 4 "$rootdir/emulators/gpsp/raspberrypi/gpsp %ROM%"</command>
        <platform>gba</platform>
    </system>

    <system>
        <fullname>Game Boy Color</fullname>
        <name>gbc</name>
        <path>$rootdir/roms/gbc</path>
        <extension>.gbc .GBC</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/gambatte-libretro/libgambatte/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/gbc/retroarch.cfg %ROM%"</command>
        <platform>gbc</platform>
    </system>

    <system>
        <fullname>Sega Game Gear</fullname>
        <name>gamegear</name>
        <path>$rootdir/roms/gamegear</path>
        <extension>.gg .GG</extension>
        <command>$rootdir/emulators/osmose-0.8.1+rpi20121122/osmose %ROM% -joy -tv -fs</command>
        <platform>gamegear</platform>
    </system>

    <system>
        <fullname>Intellivision</fullname>
        <name>intellivision</name>
        <path>$rootdir/roms/intellivision</path>
        <extension>.int .INT .bin .BIN</extension>
        <command>$rootdir/emulators/jzintv-1.0-beta4/bin/jzintv -z1 -f1 -q %ROM%</command>
        <platform>intellivision</platform>
    </system>

    <system>
        <fullname>MAME</fullname>
        <name>mame</name>
        <path>$rootdir/roms/mame</path>
        <extension>.zip .ZIP</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 4 "$rootdir/emulators/mame4all-pi/mame %BASENAME%"</command>
        <!-- alternatively: <command>$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/imame4all-libretro/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/mame/retroarch.cfg %ROM% </command> -->
        <!-- alternatively: <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/pifba/fba2x %ROM%" </command> -->
        <platform>arcade</platform>
    </system>

    <system>
        <fullname>FinalBurn Alpha</fullname>
        <name>fba</name>
        <path>$rootdir/roms/fba</path>
        <extension>.zip .ZIP</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/pifba/fba2x %ROM%" </command>
        <!-- alternatively: <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/fba-libretro/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/fba/retroarch.cfg $__tmpnetplaymode$__tmpnetplayhostip_cfile$__tmpnetplayport$__tmpnetplayframes %ROM%"</command> -->
        <platform>arcade</platform>
    </system>

    <system>
        <fullname>PC (x86)</fullname>
        <name>pc</name>
        <path>$rootdir/roms/x86</path>
        <extension>.txt</extension>
        <command>$rootdir/emulators/rpix86/Start.sh</command>
        <platform>pc</platform>
    </system>

    <system>
        <fullname>NeoGeo</fullname>
        <name>neogeo</name>
        <path>$rootdir/roms/neogeo</path>
        <extension>.zip .ZIP .fba .FBA</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/pifba/fba2x %ROM%" </command>
        <!-- alternatively: <command>$rootdir/emulators/gngeo-pi-0.85/installdir/bin/arm-linux-gngeo -i $rootdir/roms/neogeo -B $rootdir/emulators/gngeo-pi-0.85/neogeobios %ROM%</command> -->
        <platform>neogeo</platform>
    </system>

    <system>
        <fullname>Nintendo Entertainment System</fullname>
        <name>nes</name>
        <path>$rootdir/roms/nes</path>
        <extension>.nes .NES</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 4 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/fceu-next/fceumm-code/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/nes/retroarch.cfg $__tmpnetplaymode$__tmpnetplayhostip_cfile$__tmpnetplayport$__tmpnetplayframes %ROM%"</command>
        <platform>nes</platform>
    </system>

    <system>
        <fullname>Nintendo 64</fullname>
        <name>n64</name>
        <path>$rootdir/roms/n64</path>
        <extension>.z64 .Z64 .n64 .N64</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "cd $rootdir/emulators/mupen64plus-rpi/test/ && ./mupen64plus %ROM%"</command>
        <platform>n64</platform>
    </system>

    <system>
        <fullname>TurboGrafx 16 (PC Engine)</fullname>
        <name>pcengine</name>
        <path>$rootdir/roms/pcengine</path>
        <extension>.pce .PCE</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/mednafen-pce-libretro/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/pcengine/retroarch.cfg %ROM%"</command>
        <platform>pcengine</platform>
    </system>

    <system>
        <fullname>Playstation Portable</fullname>
        <name>psp</name>
        <path>$rootdir/roms/psp</path>
        <extension>.iso .ISO .cso .CSO</extension>
        <command>$rootdir/emulators/ppsspp/PPSSPPSDL %ROM% en</command>
        <platform>psp</platform>
    </system>

    <system>
        <fullname>Ports</fullname>
        <name>ports</name>
        <path>$rootdir/roms/ports</path>
        <extension>.sh .SH</extension>
        <command>%ROM%</command>
        <platformid>1</platformid>
    </system>

    <system>
        <fullname>ScummVM</fullname>
        <name>scummvm</name>
        <path>$rootdir/roms/scummvm</path>
        <extension>.exe .EXE</extension>
        <command>scummvm</command>
        <platform>pc</platform>
    </system>

    <system>
        <fullname>Sega Master System II</fullname>
        <name>mastersystem</name>
        <path>$rootdir/roms/mastersystem</path>
        <extension>.sms .SMS</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 4 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/picodrive/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/mastersystem/retroarch.cfg $__tmpnetplaymode$__tmpnetplayhostip_cfile$__tmpnetplayport$__tmpnetplayframes %ROM%"</command>
        <!-- alternatively: <command>$rootdir/emulators/osmose-0.8.1+rpi20121122/osmose %ROM% -joy -tv -fs</command> -->
        <platform>mastersystem</platform>
    </system>

    <system>
        <fullname>Sega Mega Drive / Genesis</fullname>
        <name>megadrive</name>
        <path>$rootdir/roms/megadrive</path>
        <extension>.smd .SMD .bin .BIN .gen .GEN .md .MD .zip .ZIP</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 4 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/picodrive/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/megadrive/retroarch.cfg $__tmpnetplaymode$__tmpnetplayhostip_cfile$__tmpnetplayport$__tmpnetplayframes %ROM%"</command>
        <!-- alternatively: <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/dgen-sdl/dgen -f -r $rootdir/configs/all/dgenrc %ROM%"</command> -->
        <!-- alternatively: <command>export LD_LIBRARY_<path>"$rootdir/supplementary/dispmanx/SDL12-kms-dispmanx/build/.libs"; $rootdir/emulators/dgen-sdl/dgen %ROM%</path></command> -->
        <platform>genesis,megadrive</platform>
    </system>

    <system>
        <fullname>Sega CD</fullname>
        <name>segacd</name>
        <path>$rootdir/roms/segacd</path>
        <extension>.smd .SMD .bin .BIN .md .MD .zip .ZIP .iso .ISO</extension>
        <command>/home/pi/RetroPie/supplementary/runcommand/runcommand.sh 1 "/home/pi/RetroPie/emulators/RetroArch/installdir/bin/retroarch -L /home/pi/RetroPie/emulatorcores/picodrive/picodrive_libretro.so --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/segacd/retroarch.cfg  %ROM%"</command>
        <!-- <command>/home/pi/RetroPie/supplementary/runcommand/runcommand.sh 1 "/home/pi/RetroPie/emulators/dgen-sdl/dgen -f -r /home/pi/RetroPie/configs/all/dgenrc %ROM%"</command> -->
        <!-- <command>export LD_LIBRARY_<path>"/home/pi/RetroPie/supplementary/dispmanx/SDL12-kms-dispmanx/build/.libs"; /home/pi/RetroPie/emulators/dgen-sdl/dgen %ROM%</path></command> -->
        <platform>segacd</platform>
    </system>

    <system>
        <fullname>Sega 32X</fullname>
        <name>sega32x</name>
        <path>$rootdir/roms/sega32x</path>
        <extension>.32x .32X .smd .SMD .bin .BIN .md .MD .zip .ZIP</extension>
        <command>/home/pi/RetroPie/supplementary/runcommand/runcommand.sh 1 "/home/pi/RetroPie/emulators/RetroArch/installdir/bin/retroarch -L /home/pi/RetroPie/emulatorcores/picodrive/picodrive_libretro.so --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/sega32x/retroarch.cfg  %ROM%"</command>
        <!-- <command>/home/pi/RetroPie/supplementary/runcommand/runcommand.sh 1 "/home/pi/RetroPie/emulators/dgen-sdl/dgen -f -r /home/pi/RetroPie/configs/all/dgenrc %ROM%"</command> -->
        <!-- <command>export LD_LIBRARY_<path>"/home/pi/RetroPie/supplementary/dispmanx/SDL12-kms-dispmanx/build/.libs"; /home/pi/RetroPie/emulators/dgen-sdl/dgen %ROM%</path></command> -->
        <platform>sega32x</platform>
    </system>

    <system>
        <fullname>Sony Playstation 1</fullname>
        <name>psx</name>
        <path>$rootdir/roms/psx</path>
        <extension>.img .IMG .7z .7Z .pbp .PBP .bin .BIN .cue .CUE</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 1 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/pcsx_rearmed/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/psx/retroarch.cfg %ROM%"</command>
        <platform>psx</platform>
    </system>

    <system>
        <fullname>Super Nintendo</fullname>
        <name>snes</name>
        <path>$rootdir/roms/snes</path>
        <extension>.smc .sfc .fig .swc .SMC .SFC .FIG .SWC</extension>
        <command>$rootdir/supplementary/runcommand/runcommand.sh 4 "$rootdir/emulators/RetroArch/installdir/bin/retroarch -L `find $rootdir/emulatorcores/pocketsnes-libretro/ -name "*libretro*.so" | head -1` --config $rootdir/configs/all/retroarch.cfg --appendconfig $rootdir/configs/snes/retroarch.cfg $__tmpnetplaymode$__tmpnetplayhostip_cfile $__tmpnetplayport$__tmpnetplayframes %ROM%"</command>
        <!-- alternatively: <command>$rootdir/emulators/snes9x-rpi/snes9x %ROM%</command> -->
        <!-- alternatively: <command>$rootdir/emulators/pisnes/snes9x %ROM%</command> -->
        <platform>snes</platform>
    </system>

    <system>
        <fullname>ZX Spectrum</fullname>
        <name>zxspectrum</name>
        <path>$rootdir/roms/zxspectrum</path>
        <extension>.z80 .Z80</extension>
        <command>xinit fuse</command>
        <!-- alternatively: <command>$rootdir/emulators/fbzx-2.10.0/fbzx %ROM%</command> -->
        <platform>zxspectrum</platform>
    </system>

    <system>
        <fullname>Input Configuration</fullname>
        <name>esconfig</name>
        <path>$rootdir/roms/esconfig</path>
        <extension>.py .PY</extension>
        <command>%ROM%</command>
        <platform>ignore</platform>
    </system>

</systemList>
_EOF_

# TODO: can these lines be removed?
# chown -R $user "$rootdir/../.emulationstation"
# chgrp -R $user "$rootdir/../.emulationstation"

}

# install runcommand script for switching video modes
function sup_install_runcommandscript()
{
    printMsg "Installing script for setting video mode."
    mkdir -p "$rootdir/supplementary/runcommand/"
    cp $scriptdir/supplementary/runcommand.sh "$rootdir/supplementary/runcommand/"
    chmod +x "$rootdir/supplementary/runcommand/runcommand.sh"
    chown -R $user $rootdir
    chgrp -R $user $rootdir
}

function sup_checkInstallXarcade2Jstick()
{
    if [[ ! -d $rootdir/supplementary/Xarcade2Jstick ]]; then
        printMsg "Downloading and installing Xarcade2Jstick"
        gitPullOrClone "$rootdir/supplementary/Xarcade2Jstick/" https://github.com/petrockblog/Xarcade2Joystick.git
        pushd "$rootdir/supplementary/Xarcade2Jstick/"
            make
            make install
        popd
    fi
}

function sup_enableDisableXarcade2JstickStart()
{
    cmd=(dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --menu "Choose the desired boot behaviour." 22 86 16)
    options=(1 "Disable Xarcade2Jstick service."
             2 "Enable Xarcade2Jstick service." )
    choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
    if [ "$choices" != "" ]; then
        case $choices in
            1) sup_checkInstallXarcade2Jstick
               pushd "$rootdir/supplementary/Xarcade2Jstick/"
               make uninstallservice
               popd
               dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Disabled Xarcade2Jstick." 22 76    
                            ;;
            2) sup_checkInstallXarcade2Jstick
               pushd "$rootdir/supplementary/Xarcade2Jstick/"
               make installservice
               popd
               dialog --backtitle "PetRockBlock.com - RetroPie Setup. Installation folder: $rootdir for user $user" --msgbox "Enabled Xarcade2Jstick service." 22 76    
                            ;;
        esac
    else
        break
    fi     
}
